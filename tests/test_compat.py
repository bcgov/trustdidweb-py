# flake8: noqa
"""Common test suite as generated by trustdidweb-go."""

from enum import Enum
from pathlib import Path
from typing import Any, Optional

import json

from pydantic import BaseModel, Field

from aries_askar import Key as AskarRawKey
from did_history.state import DocumentState
from did_tdw.proof import AskarSigningKey, di_jcs_sign
from did_tdw.provision import provision_did
from did_tdw.resolver import resolve_did


TEST_DIR = Path(__file__).parent


class EntryType(str, Enum):
    CreationTest = "CreationTest"
    UpdateTest = "UpdateTest"
    VerificationTest = "VerificationTest"
    PositiveEvaluationTest = "PositiveEvaluationTest"
    NegativeEvaluationTest = "NegativeEvaluationTest"


class Entry(BaseModel):
    id: str
    type: list[EntryType]
    purpose: str
    input: Optional[str] = None
    expect: Optional[str] = None
    signing_key: Optional[dict[str, Any]] = Field(None, alias="signingKey")
    params: Optional[dict[str, Any]] = Field(default_factory=dict)
    did_document: dict[str, Any] = Field(None, alias="didDocument")
    options: Optional[dict[str, Any]] = Field(default_factory=dict)

    def read_input_json(self) -> list:
        if not self.input:
            raise ValueError("missing 'input' path")
        return read_jsonl(TEST_DIR.joinpath(self.input))

    def read_expect_json(self) -> list:
        if not self.expect:
            raise ValueError("missing 'expect' path")
        return read_jsonl(TEST_DIR.joinpath(self.expect))

    def get_signing_key(self) -> AskarSigningKey:
        if not self.signing_key:
            raise ValueError("missing signing key")
        return AskarSigningKey(AskarRawKey.from_jwk(self.signing_key))


def read_jsonl(path: Path) -> list:
    ret = []
    for line in open(path):
        ret.append(json.loads(line))
    return ret


async def test_compat():
    data = json.load(open(TEST_DIR.joinpath("testdata/manifest.json")))

    for row in data:
        entry = Entry.model_validate(row)

        if EntryType.CreationTest in entry.type:
            assert EntryType.PositiveEvaluationTest in entry.type
            sk = entry.get_signing_key()
            params = {**entry.params, "updateKeys": [sk.multikey]}
            sign_time = entry.options.get("signingTime")
            state = provision_did(
                entry.did_document,
                params=params,
                timestamp=sign_time,
            )
            proof = di_jcs_sign(state, sk, timestamp=sign_time)
            state.proofs.append(proof)
            actual = state.history_line()
            expect = entry.read_expect_json()
            assert [actual] == expect

        elif EntryType.UpdateTest in entry.type:
            assert EntryType.PositiveEvaluationTest in entry.type
            sign_time = entry.options.get("signingTime")
            sk = entry.get_signing_key()
            prev_state = None
            prev_state = None
            input_lines = entry.read_input_json()
            for line in input_lines:
                prev_state = DocumentState.load_history_line(line, prev_state)
            state = prev_state.create_next(
                entry.did_document, entry.params, timestamp=sign_time
            )
            proof = di_jcs_sign(state, sk, timestamp=sign_time)
            state.proofs.append(proof)
            actual = input_lines + [state.history_line()]
            expect = entry.read_expect_json()
            assert actual == expect

        elif EntryType.VerificationTest in entry.type:
            input_js = entry.read_input_json()
            doc_id = input_js[0][3]["value"][
                "id"
            ]  # temporary hack to fetch document ID
            result = await resolve_did(
                doc_id, local_history=TEST_DIR.joinpath(entry.input)
            )
            if EntryType.PositiveEvaluationTest in entry.type:
                assert result.document
            elif EntryType.NegativeEvaluationTest in entry.type:
                assert result.resolution_metadata["error"] == "invalidDid"
            else:
                raise "invalid verification test"

        else:
            raise ValueError("invalid test type")
